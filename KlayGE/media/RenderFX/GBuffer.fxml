<?xml version='1.0'?>

<effect>
	<include name="DeferredRenderingUtil.fxml"/>
	<include name="Quaternion.fxml"/>
	<include name="util.fxml"/>
	<include name="Tessellation.fxml"/>
	<include name="Lighting.fxml"/>

	<cbuffer name="per_frame">
		<parameter type="float4x4" name="mvp"/>
		<parameter type="float4x4" name="model_view"/>
		<parameter type="float4x4" name="inv_mv"/>
		<parameter type="float3" name="forward_vec"/>
		<parameter type="int2" name="frame_size"/>
	</cbuffer>

	<cbuffer name="per_model">
		<parameter type="float3" name="pos_center"/>
		<parameter type="float3" name="pos_extent"/>
		<parameter type="float2" name="tc_center"/>
		<parameter type="float2" name="tc_extent"/>
		<parameter type="float4" name="albedo_clr"/>
		<parameter type="float2" name="metalness_clr"/>
		<parameter type="float2" name="glossiness_clr"/>
		<parameter type="float4" name="emissive_clr"/>
		<parameter type="int" name="albedo_map_enabled"/>
		<parameter type="int" name="normal_map_enabled"/>
		<parameter type="int" name="height_map_parallax_enabled"/>
		<parameter type="int" name="height_map_tess_enabled"/>
		<parameter type="float" name="alpha_test_threshold"/>
		<parameter type="float2" name="height_offset_scale"/>
		<parameter type="float4" name="tess_factors"/>
		<parameter type="float4" name="object_id"/>
	</cbuffer>

	<parameter type="texture2D" name="albedo_tex"/>
	<parameter type="texture2D" name="metalness_tex"/>
	<parameter type="texture2D" name="glossiness_tex"/>
	<parameter type="texture2D" name="emissive_tex"/>
	<parameter type="texture2D" name="normal_tex"/>
	<parameter type="texture2D" name="height_tex"/>

	<parameter type="sampler" name="point_sampler">
		<state name="filtering" value="min_mag_mip_point"/>
		<state name="address_u" value="clamp"/>
		<state name="address_v" value="clamp"/>
	</parameter>
	<parameter type="sampler" name="bilinear_sampler">
		<state name="filtering" value="min_mag_linear_mip_point"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="trilinear_sampler">
		<state name="filtering" value="min_mag_mip_linear"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
	</parameter>
	<parameter type="sampler" name="aniso_sampler">
		<state name="filtering" value="anisotropic"/>
		<state name="address_u" value="wrap"/>
		<state name="address_v" value="wrap"/>
		<state name="max_anisotropy" value="4"/>
	</parameter>

	<parameter type="texture2D" name="opaque_depth_tex"/>
	<parameter type="texture2D" name="g_buffer_rt0_tex"/>

	<shader_graph_nodes>
		<node name="PositionNode" return="void" impl="RegularPositionNode">
			<param type="float3" name="pos"/>
			<param type="float4" name="tangent_quat"/>
			<param type="float4" name="blend_weights"/>
			<param type="int4" name="blend_indices"/>
			<param type="out float3" name="result_pos"/>
			<param type="out float4" name="result_tangent_quat"/>
		</node>
		<node name="TexcoordNode" return="float2" impl="RegularTexcoordNode">
			<param type="float2" name="texcoord"/>
		</node>
		
		<node name="AlbedoNode" return="float3" impl="RegularAlbedoNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="MetalnessNode" return="float" impl="RegularMetalnessNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="GlossinessNode" return="float" impl="RegularGlossinessNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="EmissiveNode" return="float3" impl="RegularEmissiveNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="OpacityNode" return="float" impl="RegularOpacityNode">
			<param type="float2" name="texcoord"/>
		</node>

		<node name="NormalNode" return="float3" impl="RegularNormalNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="HeightForParallaxMappingNode" return="float" impl="RegularHeightForParallaxMappingNode">
			<param type="float2" name="texcoord"/>
		</node>
		<node name="HeightForTessellationNode" return="float" impl="RegularHeightForTessellationNode">
			<param type="float2" name="texcoord"/>
		</node>
	</shader_graph_nodes>

	<shader>
		<![CDATA[
#if !KLAYGE_DXBC2GLSL
#define NOPERSPECTIVE_SUPPORT
#endif

void GBufferVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT,
#if SKINNING_ON
			float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
			float4 blend_indices_f : BLENDINDICES,
#else
			uint4 blend_indices : BLENDINDICES,
#endif
#endif
			out float4 oTexCoord_2xy : TEXCOORD0,
			out float4 oTsToView0_2z : TEXCOORD1,
			out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
			out noperspective float2 oScreenTc : TEXCOORD3,
#else
			out float3 oScreenTc : TEXCOORD3,
#endif
			out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, result_pos, result_tangent_quat);
	oTexCoord_2xy.xy = TexcoordNode(texcoord);

	oPos = mul(float4(result_pos, 1), mvp);

	float3x3 obj_to_ts;
	obj_to_ts[0] = transform_quat(float3(1, 0, 0), result_tangent_quat);
	obj_to_ts[1] = transform_quat(float3(0, 1, 0), result_tangent_quat) * sign(result_tangent_quat.w);
	obj_to_ts[2] = transform_quat(float3(0, 0, 1), result_tangent_quat);
	float3x3 ts_to_view = mul(obj_to_ts, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;

	oTsToView1_Depth.w = oPos.w;

	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;

#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

float2 ParallaxMappingCorrection(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float2 uv = texcoord_2xy.xy;
	float3 view = normalize(float3(ts_to_view0_2z.z, ts_to_view1.z, ts_to_view0_2z.w));
	uv += view.xy * HeightForParallaxMappingNode(uv);
	return uv;
}

float3 RestoreNormal(float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1)
{
	float3 normal = normalize(float3(texcoord_2xy.zw, ts_to_view0_2z.w));

	float3x3 ts_to_view;
	ts_to_view[0] = normalize(ts_to_view0_2z.xyz);
	ts_to_view[1] = normalize(ts_to_view1);
	ts_to_view[2] = normal;
	normal = normalize(mul(NormalNode(texcoord_2xy.xy), ts_to_view));

	return normal;
}

void ConstructMRTGBuffer(float revert_normal, float4 texcoord_2xy, float4 ts_to_view0_2z, float3 ts_to_view1,
					out float4 mrt_0, out float4 mrt_1)
{
	float3 normal = RestoreNormal(texcoord_2xy, ts_to_view0_2z, ts_to_view1) * revert_normal;

	float3 albedo = AlbedoNode(texcoord_2xy.xy);
	float metalness = MetalnessNode(texcoord_2xy.xy);
	float glossiness = GlossinessNode(texcoord_2xy.xy);

	StoreGBufferMRT(normal, glossiness, albedo, metalness,
		mrt_0, mrt_1);
}

void GBufferMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					bool is_front_face : SV_IsFrontFace,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	ConstructMRTGBuffer(is_front_face ? 1 : -1, texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaTestMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float3 ts_to_view1 : TEXCOORD2,
					bool is_front_face : SV_IsFrontFace,
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1);
	float opacity = OpacityNode(texcoord_2xy.xy);
	clip(opacity - alpha_test_threshold);
	ConstructMRTGBuffer(is_front_face ? 1 : -1, texcoord_2xy, ts_to_view0_2z, ts_to_view1, mrt_0, mrt_1);
}

void GBufferAlphaBlendMRTPS(float4 texcoord_2xy : TEXCOORD0, float4 ts_to_view0_2z : TEXCOORD1, float4 ts_to_view1_depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
					noperspective float2 screen_tc : TEXCOORD3,
#else
					float3 screen_tc_w : TEXCOORD3,
#endif
					out float4 mrt_0 : SV_Target0, out float4 mrt_1 : SV_Target1)
{
#ifndef NOPERSPECTIVE_SUPPORT
	float2 screen_tc = screen_tc_w.xy / screen_tc_w.z;
#endif

	texcoord_2xy.xy = ParallaxMappingCorrection(texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz);
	clip(opaque_depth_tex.Sample(point_sampler, screen_tc).x - ts_to_view1_depth.w);
	ConstructMRTGBuffer(1, texcoord_2xy, ts_to_view0_2z, ts_to_view1_depth.xyz, mrt_0, mrt_1);
}
		]]>
	</shader>

	<technique name="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaTestMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="greater"/>

			<state name="cull_mode" value="front"/>

			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="0"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="0"/>
			<state name="back_stencil_pass" value="replace"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="GBufferAlphaBlendMRTPS()"/>
		</pass>
	</technique>
	<technique name="GBufferAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="depth_func" value="less"/>

			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="TwoSidedGBufferMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedGBufferAlphaTestMRTTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>

	<technique name="SSSGBufferMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaTestMRTTech" inherit="SSSGBufferMRTTech">
		<pass name="p0">
			<state name="pixel_shader" value="GBufferAlphaTestMRTPS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaBlendBackMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>
	<technique name="SSSGBufferAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="front_stencil_enable" value="true"/>
			<state name="front_stencil_func" value="always_pass"/>
			<state name="front_stencil_ref" value="32"/>
			<state name="front_stencil_pass" value="replace"/>
			<state name="front_stencil_write_mask" value="32"/>
			<state name="back_stencil_enable" value="true"/>
			<state name="back_stencil_func" value="always_pass"/>
			<state name="back_stencil_ref" value="32"/>
			<state name="back_stencil_pass" value="replace"/>
			<state name="back_stencil_write_mask" value="32"/>
		</pass>
	</technique>

	<technique name="TwoSidedSSSGBufferMRTTech" inherit="SSSGBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedSSSGBufferAlphaTestMRTTech" inherit="SSSGBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<technique name="GenReflectiveShadowMapAlphaTestTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<shader>
		<![CDATA[
void GenShadowMapVS(float4 pos : POSITION,
						float2 texcoord : TEXCOORD0,
						float4 tangent_quat : TANGENT,
#if SKINNING_ON
						float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
						float4 blend_indices_f : BLENDINDICES,
#else
						uint4 blend_indices : BLENDINDICES,
#endif
#endif
						out float3 oTc : TEXCOORD0,
						out float4 oPos : SV_Position)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	float3 result_pos;
	float4 result_tangent_quat;
	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, result_pos, result_tangent_quat);
#if TRANSPARENCY_ON
	float3 normal = transform_quat(float3(0, 0, 1), result_tangent_quat);
	result_pos += normal * 0.005f;
#endif
	oTc.xy = TexcoordNode(texcoord);

	oPos = mul(float4(result_pos, 1), mvp);
	oTc.z = mul(float4(result_pos, 1), model_view).z;
}

float4 GenShadowMapPS(float3 tc : TEXCOORD0) : SV_Target
{
	return tc.z;
}

float4 GenShadowMapAlphaTestPS(float3 tc : TEXCOORD0) : SV_Target
{
	float opacity = OpacityNode(tc.xy);
	clip(opacity - alpha_test_threshold);
	return tc.z;
}
		]]>
	</shader>

	<technique name="GenShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="color_write_mask" value="0"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenShadowMapAlphaTestTech" inherit="GenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="SSSGenShadowMapTech" inherit="GenShadowMapTech">
		<macro name="TRANSPARENCY_ON" value="1"/>
	</technique>
	<technique name="SSSGenShadowMapAlphaTestTech" inherit="SSSGenShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
			<state name="depth_clip_enable" value="false"/>

			<state name="vertex_shader" value="GenShadowMapVS()"/>
			<state name="pixel_shader" value="GenShadowMapPS()"/>
		</pass>
	</technique>
	<technique name="GenCascadedShadowMapAlphaTestTech" inherit="GenCascadedShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>

	<technique name="SSSGenCascadedShadowMapTech" inherit="GenCascadedShadowMapTech">
		<macro name="TRANSPARENCY_ON" value="1"/>
	</technique>
	<technique name="SSSGenCascadedShadowMapAlphaTestTech" inherit="SSSGenCascadedShadowMapTech">
		<pass name="p0">
			<state name="pixel_shader" value="GenShadowMapAlphaTestPS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 SpecialShadingPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float3 emissive = EmissiveNode(texcoord);
	return float4(max(emissive, 0), 1);
}

float4 SpecialShadingAlphaBlendPS(float2 texcoord : TEXCOORD0) : SV_Target
{
	float4 shading = SpecialShadingPS(texcoord);

	float opacity = OpacityNode(texcoord);
	return float4(shading.xyz, opacity);
}
		]]>
	</shader>

	<technique name="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
			<state name="depth_enable" value="true"/>
			<state name="depth_func" value="equal"/>
			<state name="depth_write_mask" value="false"/>

			<state name="blend_enable" value="true"/>
			<state name="blend_op" value="add"/>
			<state name="src_blend" value="one"/>
			<state name="dest_blend" value="one"/>
			<state name="blend_op_alpha" value="add"/>
			<state name="src_blend_alpha" value="src_alpha"/>
			<state name="dest_blend_alpha" value="zero"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SpecialShadingPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendBackTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="cull_mode" value="front"/>

			<state name="pixel_shader" value="SpecialShadingAlphaBlendPS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>
		</pass>
	</technique>

	<shader version="5">
		<![CDATA[
struct VS_CONTROL_POINT_OUTPUT
{
	float3 Pos : POSITION;
	float2 Texcoord : TEXCOORD0;
	float4 TangentQuat : TEXCOORD1;
};

VS_CONTROL_POINT_OUTPUT GBufferTessVS(float4 pos : POSITION,
			float2 texcoord : TEXCOORD0,
			float4 tangent_quat : TANGENT
#if SKINNING_ON
			, float4 blend_weights : BLENDWEIGHT,
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
			float4 blend_indices_f : BLENDINDICES
#else
			uint4 blend_indices : BLENDINDICES
#endif
#endif
			)
{
#if SKINNING_ON
#if KLAYGE_OPENGL || KLAYGE_OPENGLES
	int4 blend_indices = (int4)blend_indices_f;
#endif
#else
	float4 blend_weights = 0;
	int4 blend_indices = 0;
#endif

	pos = float4(pos.xyz * pos_extent + pos_center, 1);
	texcoord = texcoord * tc_extent + tc_center;
	tangent_quat = tangent_quat * 2 - 1;

	VS_CONTROL_POINT_OUTPUT output;

	PositionNode(pos.xyz, tangent_quat, blend_weights, blend_indices, output.Pos, output.TangentQuat);
	output.Texcoord = TexcoordNode(texcoord);

	return output;
}

struct HS_CONSTANT_DATA_OUTPUT
{
	// Tess factor for the FF HW block
	float edges[3]	: SV_TessFactor;
	float inside	: SV_InsideTessFactor;
};

float2 ScreenCoord(float3 pos)
{
	float4 p = mul(float4(pos, 1), mvp);
	p /= p.w;
	p.y *= KLAYGE_FLIPPING;
	return (p.xy * 0.5f + 0.5f) * frame_size;
}

float EdgeFactor(float2 p0_ss, float2 p1_ss, float3 p0_ws, float3 p1_ws)
{
	float np = distance(p0_ss, p1_ss);
	float dist = length(mul(float4((p0_ws + p1_ws) / 2, 1), model_view).xyz);
	return np / dist;
}

HS_CONSTANT_DATA_OUTPUT GBufferTessConstantsHS(InputPatch<VS_CONTROL_POINT_OUTPUT, 3> ip)
{
	HS_CONSTANT_DATA_OUTPUT output;

	const float BACK_FACE_THRESHOLD = 0.4f;
		
	float3 normal0 = transform_quat(float3(0, 0, 1), ip[0].TangentQuat);
	float3 normal1 = transform_quat(float3(0, 0, 1), ip[1].TangentQuat);
	float3 normal2 = transform_quat(float3(0, 0, 1), ip[2].TangentQuat);
		
	float3 edge0_normal = (normal2 + normal0) * 0.5f;
	float3 edge1_normal = (normal0 + normal1) * 0.5f;
	float3 edge2_normal = (normal1 + normal2) * 0.5f;

	float3 orientation;
	orientation.x = dot(edge0_normal, forward_vec);
	orientation.y = dot(edge1_normal, forward_vec);
	orientation.z = dot(edge2_normal, forward_vec);
		
	if (all(orientation > BACK_FACE_THRESHOLD))
	{
		output.inside = 0;
		output.edges[0] = 0;
		output.edges[1] = 0;
		output.edges[2] = 0;
	}
	else
	{
		float2 p0 = ScreenCoord(ip[0].Pos);
		float2 p1 = ScreenCoord(ip[1].Pos);
		float2 p2 = ScreenCoord(ip[2].Pos);

		float3 edges_factors = float3(EdgeFactor(p2, p0, ip[2].Pos, ip[0].Pos),
				EdgeFactor(p0, p1, ip[0].Pos, ip[1].Pos),
				EdgeFactor(p1, p2, ip[1].Pos, ip[2].Pos))
			* tess_factors.x * 0.3f;

		output.edges[0] = clamp(edges_factors.x, tess_factors.z, tess_factors.w);
		output.edges[1] = clamp(edges_factors.y, tess_factors.z, tess_factors.w);
		output.edges[2] = clamp(edges_factors.z, tess_factors.z, tess_factors.w);
		output.inside = clamp((edges_factors.x + edges_factors.y + edges_factors.z) / 3,
			tess_factors.z, tess_factors.w);
	}

	return output;
}

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[outputcontrolpoints(3)]
[patchconstantfunc("GBufferTessConstantsHS")]
VS_CONTROL_POINT_OUTPUT GBufferTessHS(InputPatch<VS_CONTROL_POINT_OUTPUT, 3> p, 
										uint i : SV_OutputControlPointID)
{
	return p[i];
}

void PostTessellation(float3 bc_coords, float3 pos, float2 uv, float4 tangent_quat,
						out float4 oTexCoord_2xy,
						out float4 oTsToView0_2z,
						out float4 oTsToView1_Depth,
#ifdef NOPERSPECTIVE_SUPPORT
						out noperspective float2 oScreenTc,
#else
						out float3 oScreenTc,
#endif
						out float4 oPos)
{
	float3x3 obj_to_tangent;
	obj_to_tangent[0] = transform_quat(float3(1, 0, 0), tangent_quat);
	obj_to_tangent[1] = transform_quat(float3(0, 1, 0), tangent_quat) * sign(tangent_quat.w);
	obj_to_tangent[2] = transform_quat(float3(0, 0, 1), tangent_quat);

	pos += HeightForTessellationNode(uv) * obj_to_tangent[2];

	oPos = mul(float4(pos, 1), mvp);
	oTexCoord_2xy.xy = uv;

	float3x3 ts_to_view = mul(obj_to_tangent, (float3x3)model_view);
	oTsToView0_2z.xyz = ts_to_view[0];
	oTsToView1_Depth.xyz = ts_to_view[1];
	oTexCoord_2xy.zw = ts_to_view[2].xy;
	oTsToView0_2z.w = ts_to_view[2].z;

	oTsToView1_Depth.w = oPos.w;

	oScreenTc.xy = oPos.xy / oPos.w * 0.5f;
	oScreenTc.y *= KLAYGE_FLIPPING;
	oScreenTc.xy += 0.5f;

#ifndef NOPERSPECTIVE_SUPPORT
	oScreenTc.z = oPos.w;
	oScreenTc.xy *= oScreenTc.z;
#endif
}

[domain("tri")]
void GBufferFlatTessDS(HS_CONSTANT_DATA_OUTPUT HSConstantData, 
							float3 bc_coords : SV_DomainLocation,
							const OutputPatch<VS_CONTROL_POINT_OUTPUT, 3> patch,

							out float4 oTexCoord_2xy : TEXCOORD0,
							out float4 oTsToView0_2z : TEXCOORD1,
							out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
							out noperspective float2 oScreenTc : TEXCOORD3,
#else
							out float3 oScreenTc : TEXCOORD3,
#endif
							out float4 oPos : SV_Position)
{
	float3 pos;
	float2 texcoord;
	float4 tangent_quat;
	InterpolateFlatAttrs(bc_coords,
				patch[0].Pos, patch[1].Pos, patch[2].Pos,
				patch[0].Texcoord, patch[1].Texcoord, patch[2].Texcoord,
				patch[0].TangentQuat, patch[1].TangentQuat, patch[2].TangentQuat,

				pos, texcoord,
				tangent_quat);
				
	PostTessellation(bc_coords, pos, texcoord, tangent_quat,
				oTexCoord_2xy, oTsToView0_2z, oTsToView1_Depth, oScreenTc, oPos);
}

[domain("tri")]
void GBufferSmoothTessDS(HS_CONSTANT_DATA_OUTPUT HSConstantData, 
							float3 bc_coords : SV_DomainLocation,
							const OutputPatch<VS_CONTROL_POINT_OUTPUT, 3> patch,

							out float4 oTexCoord_2xy : TEXCOORD0,
							out float4 oTsToView0_2z : TEXCOORD1,
							out float4 oTsToView1_Depth : TEXCOORD2,
#ifdef NOPERSPECTIVE_SUPPORT
							out noperspective float2 oScreenTc : TEXCOORD3,
#else
							out float3 oScreenTc : TEXCOORD3,
#endif
							out float4 oPos : SV_Position)
{
	float3 pos;
	float2 texcoord;
	float4 tangent_quat;
	InterpolatePhongAttrs(bc_coords,
				patch[0].Pos, patch[1].Pos, patch[2].Pos,
				patch[0].Texcoord, patch[1].Texcoord, patch[2].Texcoord,
				patch[0].TangentQuat, patch[1].TangentQuat, patch[2].TangentQuat,

				pos, texcoord,
				tangent_quat);

	PostTessellation(bc_coords, pos, texcoord, tangent_quat,
				oTexCoord_2xy, oTsToView0_2z, oTsToView1_Depth, oScreenTc, oPos);
}
		]]>
	</shader>

	<technique name="GBufferFlatTessMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferFlatTessAlphaTestMRTTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferFlatTessAlphaBlendBackMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferFlatTessAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingFlatTessTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingFlatTessAlphaBlendBackTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingFlatTessAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>

	<technique name="TwoSidedGBufferFlatTessMRTTech" inherit="GBufferFlatTessMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedGBufferFlatTessAlphaTestMRTTech" inherit="GBufferFlatTessAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>

	<technique name="SSSGBufferFlatTessMRTTech" inherit="SSSGBufferMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferFlatTessAlphaTestMRTTech" inherit="SSSGBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferFlatTessAlphaBlendBackMRTTech" inherit="SSSGBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferFlatTessAlphaBlendFrontMRTTech" inherit="SSSGBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferFlatTessDS()"/>
		</pass>
	</technique>

	<technique name="TwoSidedSSSGBufferFlatTessMRTTech" inherit="SSSGBufferFlatTessMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedSSSGBufferFlatTessAlphaTestMRTTech" inherit="SSSGBufferFlatTessAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>

	<technique name="GBufferSmoothTessMRTTech" inherit="GBufferMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferSmoothTessAlphaTestMRTTech" inherit="GBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferSmoothTessAlphaBlendBackMRTTech" inherit="GBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="GBufferSmoothTessAlphaBlendFrontMRTTech" inherit="GBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingSmoothTessTech" inherit="SpecialShadingTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingSmoothTessAlphaBlendBackTech" inherit="SpecialShadingAlphaBlendBackTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SpecialShadingSmoothTessAlphaBlendFrontTech" inherit="SpecialShadingAlphaBlendFrontTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>

	<technique name="TwoSidedGBufferSmoothTessMRTTech" inherit="GBufferSmoothTessMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedGBufferSmoothTessAlphaTestMRTTech" inherit="GBufferSmoothTessAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>

	<technique name="SSSGBufferSmoothTessMRTTech" inherit="SSSGBufferMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferSmoothTessAlphaTestMRTTech" inherit="SSSGBufferAlphaTestMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferSmoothTessAlphaBlendBackMRTTech" inherit="SSSGBufferAlphaBlendBackMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>
	<technique name="SSSGBufferSmoothTessAlphaBlendFrontMRTTech" inherit="SSSGBufferAlphaBlendFrontMRTTech">
		<pass name="p0">
			<state name="vertex_shader" value="GBufferTessVS()"/>
			<state name="hull_shader" value="GBufferTessHS()"/>
			<state name="domain_shader" value="GBufferSmoothTessDS()"/>
		</pass>
	</technique>

	<technique name="TwoSidedSSSGBufferSmoothTessMRTTech" inherit="SSSGBufferSmoothTessMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>
	<technique name="TwoSidedSSSGBufferSmoothTessAlphaTestMRTTech" inherit="SSSGBufferSmoothTessAlphaTestMRTTech">
		<pass name="p0">
			<state name="cull_mode" value="none"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
float4 SelectModePS() : SV_Target
{
	return object_id;
}
		]]>
	</shader>

	<technique name="SelectModeTech">
		<pass name="p0">
			<state name="cull_mode" value="back"/>

			<state name="vertex_shader" value="GBufferVS()"/>
			<state name="pixel_shader" value="SelectModePS()"/>
		</pass>
	</technique>


	<shader>
		<![CDATA[
void RegularPositionNode(float3 pos, float4 tangent_quat, float4 blend_weights, int4 blend_indices, out float3 result_pos, out float4 result_tangent_quat)
{
	result_pos = pos.xyz;
	result_tangent_quat = normalize(tangent_quat);
}

float2 RegularTexcoordNode(float2 texcoord)
{
	return texcoord;
}

float3 RegularAlbedoNode(float2 texcoord)
{
	float3 albedo = albedo_clr.rgb;
	if (albedo_map_enabled)
	{
		albedo *= albedo_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	return albedo;
}

float RegularMetalnessNode(float2 texcoord)
{
	float metalness = metalness_clr.r;
	if (metalness_clr.y > 0.5f)
	{
		metalness *= metalness_tex.Sample(aniso_sampler, texcoord).r;
	}
	return metalness;
}

float RegularGlossinessNode(float2 texcoord)
{
	float glossiness = glossiness_clr.r;
	if (glossiness_clr.y > 0.5f)
	{
		glossiness *= glossiness_tex.Sample(aniso_sampler, texcoord).r;
	}
	return glossiness;
}

float3 RegularEmissiveNode(float2 texcoord)
{
	float3 emissive = emissive_clr.rgb;
	if (emissive_clr.w > 0.5f)
	{
		emissive *= emissive_tex.Sample(aniso_sampler, texcoord).rgb;
	}
	return emissive;
}

float RegularOpacityNode(float2 texcoord)
{
	float opacity = albedo_clr.a;
	if (albedo_map_enabled)
	{
		opacity *= albedo_tex.Sample(bilinear_sampler, texcoord).a;
	}
	return opacity;
}

float3 RegularNormalNode(float2 texcoord)
{
	float3 normal = float3(0, 0, 1);
	if (normal_map_enabled)
	{
		normal = decompress_normal(normal_tex.Sample(trilinear_sampler, texcoord));
	}
	return normal;
}

float RegularHeightForParallaxMappingNode(float2 texcoord)
{
	float height = 0;
	if (height_map_parallax_enabled)
	{
		height = (height_tex.Sample(trilinear_sampler, texcoord).x + height_offset_scale.x) * height_offset_scale.y;
	}
	return height;
}

float RegularHeightForTessellationNode(float2 texcoord)
{
	float height = 0;
	if (height_map_tess_enabled)
	{
		height = (height_tex.SampleLevel(bilinear_sampler, texcoord, 0).x + height_offset_scale.x) * 0.1f * height_offset_scale.y;
	}
	return height;
}
		]]>
	</shader>
</effect>
